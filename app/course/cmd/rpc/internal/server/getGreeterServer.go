// Code generated by goctl. DO NOT EDIT.
// Source: ChoiCourse.proto

package server

import (
	"context"

	"github.com/moker/app/course/cmd/rpc/internal/logic"
	"github.com/moker/app/course/cmd/rpc/internal/svc"
	"github.com/moker/app/course/cmd/rpc/pb"
)

type GetGreeterServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedGetGreeterServer
}

func NewGetGreeterServer(svcCtx *svc.ServiceContext) *GetGreeterServer {
	return &GetGreeterServer{
		svcCtx: svcCtx,
	}
}

func (s *GetGreeterServer) GetCourse(ctx context.Context, in *pb.CourseRequest) (*pb.CourseReplyList, error) {
	l := logic.NewGetCourseLogic(ctx, s.svcCtx)
	return l.GetCourse(in)
}

func (s *GetGreeterServer) GetSearchCourse(ctx context.Context, in *pb.SearchACRequest) (*pb.SearchACReplyList, error) {
	l := logic.NewGetSearchCourseLogic(ctx, s.svcCtx)
	return l.GetSearchCourse(in)
}

func (s *GetGreeterServer) GetSearchECourse(ctx context.Context, in *pb.SearchERequest) (*pb.SearchEReplyList, error) {
	l := logic.NewGetSearchECourseLogic(ctx, s.svcCtx)
	return l.GetSearchECourse(in)
}

func (s *GetGreeterServer) DeleteSCourse(ctx context.Context, in *pb.SdelCRequest) (*pb.SdelCReply, error) {
	l := logic.NewDeleteSCourseLogic(ctx, s.svcCtx)
	return l.DeleteSCourse(in)
}

func (s *GetGreeterServer) PutSCourse(ctx context.Context, in *pb.SputCRequest) (*pb.SputCReply, error) {
	l := logic.NewPutSCourseLogic(ctx, s.svcCtx)
	return l.PutSCourse(in)
}

func (s *GetGreeterServer) PutTCourse(ctx context.Context, in *pb.TputCRequest) (*pb.TputCReply, error) {
	l := logic.NewPutTCourseLogic(ctx, s.svcCtx)
	return l.PutTCourse(in)
}

func (s *GetGreeterServer) UpdateTCourse(ctx context.Context, in *pb.TupdateCRequest) (*pb.TupdateCReply, error) {
	l := logic.NewUpdateTCourseLogic(ctx, s.svcCtx)
	return l.UpdateTCourse(in)
}

func (s *GetGreeterServer) DeleteTCourse(ctx context.Context, in *pb.TdeleteCRequest) (*pb.TdeleteCReply, error) {
	l := logic.NewDeleteTCourseLogic(ctx, s.svcCtx)
	return l.DeleteTCourse(in)
}

func (s *GetGreeterServer) GetTCourse(ctx context.Context, in *pb.TgetCRequest) (*pb.TgetCReplyList, error) {
	l := logic.NewGetTCourseLogic(ctx, s.svcCtx)
	return l.GetTCourse(in)
}
