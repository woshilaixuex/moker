// Code generated by goctl. DO NOT EDIT.
// Source: ChoiCourse.proto

package getgreeter

import (
	"context"

	"github.com/moker/app/course/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CourseReply       = pb.CourseReply
	CourseReplyList   = pb.CourseReplyList
	CourseRequest     = pb.CourseRequest
	SdelCReply        = pb.SdelCReply
	SdelCRequest      = pb.SdelCRequest
	SearchACReply     = pb.SearchACReply
	SearchACReplyList = pb.SearchACReplyList
	SearchACRequest   = pb.SearchACRequest
	SearchEReply      = pb.SearchEReply
	SearchEReplyList  = pb.SearchEReplyList
	SearchERequest    = pb.SearchERequest
	SputCReply        = pb.SputCReply
	SputCRequest      = pb.SputCRequest
	TdeleteCReply     = pb.TdeleteCReply
	TdeleteCRequest   = pb.TdeleteCRequest
	TgetCReply        = pb.TgetCReply
	TgetCReplyList    = pb.TgetCReplyList
	TgetCRequest      = pb.TgetCRequest
	TputCReply        = pb.TputCReply
	TputCRequest      = pb.TputCRequest
	TputCRequestList  = pb.TputCRequestList
	TupdateCReply     = pb.TupdateCReply
	TupdateCRequest   = pb.TupdateCRequest

	GetGreeter interface {
		GetCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReplyList, error)
		GetSearchCourse(ctx context.Context, in *SearchACRequest, opts ...grpc.CallOption) (*SearchACReplyList, error)
		GetSearchECourse(ctx context.Context, in *SearchERequest, opts ...grpc.CallOption) (*SearchEReplyList, error)
		DeleteSCourse(ctx context.Context, in *SdelCRequest, opts ...grpc.CallOption) (*SdelCReply, error)
		PutSCourse(ctx context.Context, in *SputCRequest, opts ...grpc.CallOption) (*SputCReply, error)
		PutTCourse(ctx context.Context, in *TputCRequest, opts ...grpc.CallOption) (*TputCReply, error)
		UpdateTCourse(ctx context.Context, in *TupdateCRequest, opts ...grpc.CallOption) (*TupdateCReply, error)
		DeleteTCourse(ctx context.Context, in *TdeleteCRequest, opts ...grpc.CallOption) (*TdeleteCReply, error)
		GetTCourse(ctx context.Context, in *TgetCRequest, opts ...grpc.CallOption) (*TgetCReplyList, error)
	}

	defaultGetGreeter struct {
		cli zrpc.Client
	}
)

func NewGetGreeter(cli zrpc.Client) GetGreeter {
	return &defaultGetGreeter{
		cli: cli,
	}
}

func (m *defaultGetGreeter) GetCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReplyList, error) {
	client := pb.NewGetGreeterClient(m.cli.Conn())
	return client.GetCourse(ctx, in, opts...)
}

func (m *defaultGetGreeter) GetSearchCourse(ctx context.Context, in *SearchACRequest, opts ...grpc.CallOption) (*SearchACReplyList, error) {
	client := pb.NewGetGreeterClient(m.cli.Conn())
	return client.GetSearchCourse(ctx, in, opts...)
}

func (m *defaultGetGreeter) GetSearchECourse(ctx context.Context, in *SearchERequest, opts ...grpc.CallOption) (*SearchEReplyList, error) {
	client := pb.NewGetGreeterClient(m.cli.Conn())
	return client.GetSearchECourse(ctx, in, opts...)
}

func (m *defaultGetGreeter) DeleteSCourse(ctx context.Context, in *SdelCRequest, opts ...grpc.CallOption) (*SdelCReply, error) {
	client := pb.NewGetGreeterClient(m.cli.Conn())
	return client.DeleteSCourse(ctx, in, opts...)
}

func (m *defaultGetGreeter) PutSCourse(ctx context.Context, in *SputCRequest, opts ...grpc.CallOption) (*SputCReply, error) {
	client := pb.NewGetGreeterClient(m.cli.Conn())
	return client.PutSCourse(ctx, in, opts...)
}

func (m *defaultGetGreeter) PutTCourse(ctx context.Context, in *TputCRequest, opts ...grpc.CallOption) (*TputCReply, error) {
	client := pb.NewGetGreeterClient(m.cli.Conn())
	return client.PutTCourse(ctx, in, opts...)
}

func (m *defaultGetGreeter) UpdateTCourse(ctx context.Context, in *TupdateCRequest, opts ...grpc.CallOption) (*TupdateCReply, error) {
	client := pb.NewGetGreeterClient(m.cli.Conn())
	return client.UpdateTCourse(ctx, in, opts...)
}

func (m *defaultGetGreeter) DeleteTCourse(ctx context.Context, in *TdeleteCRequest, opts ...grpc.CallOption) (*TdeleteCReply, error) {
	client := pb.NewGetGreeterClient(m.cli.Conn())
	return client.DeleteTCourse(ctx, in, opts...)
}

func (m *defaultGetGreeter) GetTCourse(ctx context.Context, in *TgetCRequest, opts ...grpc.CallOption) (*TgetCReplyList, error) {
	client := pb.NewGetGreeterClient(m.cli.Conn())
	return client.GetTCourse(ctx, in, opts...)
}
