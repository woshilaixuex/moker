// Code generated by goctl. DO NOT EDIT.

package role

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	studentsFieldNames          = builder.RawFieldNames(&Students{})
	studentsRows                = strings.Join(studentsFieldNames, ",")
	studentsRowsExpectAutoSet   = strings.Join(stringx.Remove(studentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	studentsRowsWithPlaceHolder = strings.Join(stringx.Remove(studentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	studentsModel interface {
		Insert(ctx context.Context, data *Students) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Students, error)
		FindOneByIdUserId(ctx context.Context, id int64, userId int64) (*Students, error)
		Update(ctx context.Context, data *Students) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStudentsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Students struct {
		Id         int64     `db:"id"`
		UserId     int64     `db:"user_id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
		Version    int64     `db:"version"` // 版本号
		Name       string    `db:"name"`
		Major      string    `db:"major"`
		Faculty    string    `db:"faculty"`
		School     string    `db:"school"`
	}
)

func newStudentsModel(conn sqlx.SqlConn) *defaultStudentsModel {
	return &defaultStudentsModel{
		conn:  conn,
		table: "`students`",
	}
}

func (m *defaultStudentsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStudentsModel) FindOne(ctx context.Context, id int64) (*Students, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentsRows, m.table)
	var resp Students
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentsModel) FindOneByIdUserId(ctx context.Context, id int64, userId int64) (*Students, error) {
	var resp Students
	query := fmt.Sprintf("select %s from %s where `id` = ? and `user_id` = ? limit 1", studentsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentsModel) Insert(ctx context.Context, data *Students) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, studentsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.DeleteTime, data.DelState, data.Version, data.Name, data.Major, data.Faculty, data.School)
	return ret, err
}

func (m *defaultStudentsModel) Update(ctx context.Context, newData *Students) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, studentsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.DeleteTime, newData.DelState, newData.Version, newData.Name, newData.Major, newData.Faculty, newData.School, newData.Id)
	return err
}

func (m *defaultStudentsModel) tableName() string {
	return m.table
}
