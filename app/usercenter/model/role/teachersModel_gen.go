// Code generated by goctl. DO NOT EDIT.

package role

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/moker/common/globalkey"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	teachersFieldNames          = builder.RawFieldNames(&Teachers{})
	teachersRows                = strings.Join(teachersFieldNames, ",")
	teachersRowsExpectAutoSet   = strings.Join(stringx.Remove(teachersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	teachersRowsWithPlaceHolder = strings.Join(stringx.Remove(teachersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMokerUsercenterTeachersIdPrefix       = "cache:mokerUsercenter:teachers:id:"
	cacheMokerUsercenterTeachersUserIdPrefix = "cache:mokerUsercenter:teachers:userId:"
	cacheMokerUsercenterTeachersIdUserIdPrefix = "cache:mokerUsercenter:teachers:id:userId:"
)

type (
	teachersModel interface {
		Insert(ctx context.Context,session sqlx.Session, data *Teachers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Teachers, error)
		FindOneByUserId(ctx context.Context, userId int64) (*Teachers, error)
		Update(ctx context.Context, data *Teachers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTeachersModel struct {
		sqlc.CachedConn
		table string
	}

	Teachers struct {
		Id         int64     `db:"id"`
		UserId     int64     `db:"user_id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
		Version    int64     `db:"version"` // 版本号
		Name       string    `db:"name"`
		Faculty    string    `db:"faculty"`
		School     string    `db:"school"`
	}
)

func newTeachersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTeachersModel {
	return &defaultTeachersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`teachers`",
	}
}

func (m *defaultTeachersModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	mokerUsercenterTeachersIdKey := fmt.Sprintf("%s%v", cacheMokerUsercenterTeachersIdPrefix, id)
	mokerUsercenterTeachersIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMokerUsercenterTeachersIdUserIdPrefix, data.Id, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mokerUsercenterTeachersIdKey, mokerUsercenterTeachersIdUserIdKey)
	return err
}

func (m *defaultTeachersModel) FindOne(ctx context.Context, id int64) (*Teachers, error) {
	mokerUsercenterTeachersIdKey := fmt.Sprintf("%s%v", cacheMokerUsercenterTeachersIdPrefix, id)
	var resp Teachers
	err := m.QueryRowCtx(ctx, &resp, mokerUsercenterTeachersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", teachersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTeachersModel) FindOneByUserId(ctx context.Context, userId int64) (*Teachers, error) {
	mokerUsercenterTeachersUserIdKey := fmt.Sprintf("%s%v:%v", cacheMokerUsercenterTeachersUserIdPrefix, userId)
	var resp Teachers
	err := m.QueryRowIndexCtx(ctx, &resp, mokerUsercenterTeachersUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", teachersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTeachersModel) Insert(ctx context.Context,session sqlx.Session, data *Teachers) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	data.DelState = globalkey.DelStateNo
	mokerUsercenterTeachersIdKey := fmt.Sprintf("%s%v", cacheMokerUsercenterTeachersIdPrefix, data.Id)
	mokerUsercenterTeachersIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMokerUsercenterTeachersIdUserIdPrefix, data.Id, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, teachersRowsExpectAutoSet)
		if session != nil{
			return session.ExecCtx(ctx, query, data.UserId, data.DeleteTime, data.DelState, data.Version, data.Name, data.Faculty, data.School)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.DeleteTime, data.DelState, data.Version, data.Name, data.Faculty, data.School)
	}, mokerUsercenterTeachersIdKey, mokerUsercenterTeachersIdUserIdKey)
	return ret, err
}

func (m *defaultTeachersModel) Update(ctx context.Context, newData *Teachers) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	newData.DeleteTime = time.Unix(0, 0)
	newData.DelState = globalkey.DelStateNo
	mokerUsercenterTeachersIdKey := fmt.Sprintf("%s%v", cacheMokerUsercenterTeachersIdPrefix, data.Id)
	mokerUsercenterTeachersIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheMokerUsercenterTeachersIdUserIdPrefix, data.Id, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, teachersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.DeleteTime, newData.DelState, newData.Version, newData.Name, newData.Faculty, newData.School, newData.Id)
	}, mokerUsercenterTeachersIdKey, mokerUsercenterTeachersIdUserIdKey)
	return err
}

func (m *defaultTeachersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMokerUsercenterTeachersIdPrefix, primary)
}

func (m *defaultTeachersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", teachersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTeachersModel) tableName() string {
	return m.table
}
